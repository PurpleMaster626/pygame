import pygame
pygame.init()

win = pygame.display.set_mode((500, 500))

pygame.display.set_caption("Classical Tag")

x = 50
y = 50
width = 40
height = 60
vel = 5

run = true
while run:
    pygame.time.delay(100)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = false
    
    keys = pygame.keys.get_pressed
    
    if keys[pygame.K_a]:
        x -= vel
    if keys[pygame.K_d]:
        x += vel
    if keys[pygame.K_w]:
        y -= vel
    if keys[pygame.K_s[:
        y += vel
        
    win.fill((0, 255, 0))
    pygame.draw.rect(win, (255, 0 255), (x, y, width, height))
    pygame.display.update


pygame.quit()            
            
if(Mr. G, John, Stuart, Mrs. Durham(touch, Marnix, Lee, Nate))
if touch(10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 3, 3, 2, 2, 1, 1, 0)
if zero break
def stay
stay(Marnix, Lee, Nate)


   if touch (Marnix, Lee, Nate)
   Break
        
        keys = pygame.keys.get_pressed
            
            
import numpy as np
import matplotlib.pyplot as plt



#This funtion takes an int and returns a letter grade
def letterGrade(score):
    if score >= 90:
        letter = 'A'
    else:   # grade must be B, C, D or F
        if score >= 80:
            letter = 'B'
        else:   # grade must be C, D or F
            if score >= 70:
                letter = 'C'
            else:   # grade must D or F
                if score >= 60:
                    letter = 'D'
                else:
                    letter 'F'
    return letter
#These variables are used in our while Loop


GradeList = []


#Loops through the
print("When you are done entering grades, enter to continue.")
while(true):


    studentScore = input("What is the students grade: ")
    
    
    if(not studentScore):
        break
        
    studentScoreInt = int(studentScore)
    GradeList.append(studentScoreInt)
    
    StudentGrade = letterGrade(StudentScoreInt)
    
    
    print("The students grade is: " + StudentGrade)
    
    
values = GradeList
#this also overwrites the var(values) which makes what we enter meaning less
#unless we comnent out the line below
#Example funtion to print a normal class bell curve
#Last # is num of students (data points)
#values = np.random.normal(50, 25, 67)



input("Press enter to generate graph")
plt.hist(values, 10)
plt.show()
